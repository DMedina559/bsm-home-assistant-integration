# Defines the actions provided by the Bedrock Server Manager integration.

send_command:
  description: Sends a command to the specified Minecraft server's console. Target entities or devices associated with the server instance you want to command.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    command:
      description: The command string to send to the server console (without the leading '/').
      required: true
      example: "say Hello World from Home Assistant!"
      selector:
        text: {}

prune_download_cache:
  description: Deletes older downloaded server archives from a specified directory on the manager host, keeping a defined number of newest files.
  fields:
    directory:
      description: The absolute path on the manager host where download files (.zip) are stored.
      required: true
      example: "/opt/minecraft_manager/.downloads/stable"
      selector:
        text: {}
    keep:
      description: "(Optional) Number of newest files to keep. Uses manager's default if omitted."
      required: false
      example: 3
      selector:
        number:
          min: 0
          step: 1
          mode: box

trigger_backup:
  description: Triggers a specific backup operation (world, config file, or all) for the target server(s).
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    backup_type:
      description: Type of backup to perform.
      required: true
      example: "all"
      selector:
        select:
          options:
            - "all"
            - "world"
            - "config"
          mode: dropdown
    file_to_backup:
      description: Required only if backup_type is 'config'. Relative path of the config file within the server directory (e.g., 'server.properties').
      required: false
      example: "permissions.json"
      selector:
        text: {}

restore_backup:
  description: Restores a specific world or config file from a backup for the target server(s). Use with caution - overwrites current files!
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    restore_type:
      description: Type of restore to perform.
      required: true
      example: "world"
      selector:
        select:
          options:
            - "world"
            - "config"
          mode: dropdown
    backup_file:
      description: The full path to the backup file on the manager host (e.g., '/path/to/backups/server/world_backup_xyz.mcworld' or '/path/to/backups/server/config_backup_xyz.zip'). Must exist within the manager's configured backup directory.
      required: true
      example: "/opt/bsm/backups/my_server/world_backup_20250101_120000.mcworld"
      selector:
        text: {}

restore_latest_all:
  description: Restores the world and standard configuration files from the most recent 'all' type backup for the target server(s). Use with caution - overwrites current files!
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager

install_server:
  description: "Installs a new Minecraft Bedrock server instance via the manager. Does NOT prompt for overwrite confirmation - set 'overwrite: true' explicitly if needed."
  fields:
    server_name:
      description: Desired unique name for the new server (valid directory name characters only).
      required: true
      example: "my_new_survival"
      selector:
        text: {}
    server_version:
      description: Version to install ('LATEST', 'PREVIEW', or specific version like '1.20.81.01').
      required: true
      example: "LATEST"
      selector:
        text: {}
    overwrite:
      description: "(Optional) If true, deletes any existing server data with the same name before installing. Defaults to false."
      required: false
      example: false
      selector:
        boolean: {}

delete_server:
  description: Permanently deletes ALL data for the target server instance(s), including installation, configuration, and backups. THIS ACTION IS IRREVERSIBLE AND CANNOT BE UNDONE. USE WITH EXTREME CAUTION!
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    confirm_deletion:
      description: MUST be set to 'true' to confirm you understand this action is irreversible and will delete all server data.
      required: true
      example: false
      selector:
        boolean: {}

add_to_allowlist:
  description: Adds one or more players to the target server's allowlist. Does not remove existing players.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    players:
      description: A list of player Gamertags to add.
      required: true
      example: ["Player1", "AnotherGamer"]
      selector:
        object: {}
    ignores_player_limit:
      description: "(Optional) Set the 'ignoresPlayerLimit' flag for these players."
      required: false
      example: false
      selector:
        boolean: {}

remove_from_allowlist:
  description: Removes a specific player from the target server's allowlist (case-insensitive).
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    player_name:
      description: The Gamertag of the player to remove.
      required: true
      example: "PlayerToRemove"
      selector:
        text: {}

set_permissions:
  description: Sets permission levels ('visitor', 'member', 'operator') for players using their XUID on the target server(s). Replaces existing levels for specified players.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    permissions:
      description: A dictionary mapping Player XUIDs (as strings) to permission levels (as strings 'visitor', 'member', or 'operator').
      required: true
      example: '{"2535416409681153": "operator", "2535457894355891": "member"}'
      selector:
        object: {}

update_properties:
  description: Updates specified server properties (e.g., max-players, difficulty) for the target server(s). Only allowed properties can be changed.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    properties:
      description: A dictionary mapping server property keys (strings) to their new desired values (strings or numbers). See integration docs for allowed keys.
      required: true
      example: '{"max-players": "15", "difficulty": "normal", "allow-list": true}'
      selector:
        object: {} # Use the object selector, users will input YAML/JSON mapping