# custom_components/bedrock_server_manager/services.yaml
send_command:
  name: Send Server Command
  description: Sends a command to the specified Minecraft server's console. Target entities or devices associated with the server instance you want to command.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    command:
      name: Command
      description: The command string to send to the server console (without the leading '/').
      required: true
      example: "say Hello World from Home Assistant!"
      selector:
        text: {}

prune_download_cache:
  name: Prune Download Cache
  description: Deletes older downloaded server archives from a specified directory on the manager host, keeping a defined number of newest files. Targets a BSM manager instance.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    directory:
      name: Directory Path
      description: The absolute path on the manager host where download files (.zip) are stored.
      required: true
      example: "/opt/minecraft_manager/.downloads/stable"
      selector:
        text: {}
    keep:
      name: Number to Keep
      description: "(Optional) Number of newest files to keep. Uses BSM manager's default setting if omitted."
      required: false
      example: 3
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: box

trigger_backup:
  name: Trigger Server Backup
  description: Triggers a specific backup operation (world, config file, or all) for the target server(s).
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    backup_type:
      name: Backup Type
      description: Type of backup to perform.
      required: true
      example: "all"
      selector:
        select:
          options:
            - "all"
            - "world"
            - "config"
          mode: dropdown
    file_to_backup:
      name: File to Backup (for config type)
      description: "Required only if 'Backup Type' is 'config'. Relative path of the config file within the server directory (e.g., 'server.properties', 'permissions.json')."
      required: false
      example: "permissions.json"
      selector:
        text: {}

restore_backup:
  name: Restore Server Backup
  description: "Restores a specific world or config file from a backup for the target server(s). WARNING: This overwrites current files! Use with caution."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    restore_type:
      name: Restore Type
      description: Type of restore to perform.
      required: true
      example: "world"
      selector:
        select:
          options:
            - "world"
            - "allowlist"
            - "permissions" 
            - "properties"
          mode: dropdown
    backup_file:
      name: Backup Filename
      description: "The filename of the backup to restore (e.g., 'world_backup_xyz.mcworld' or 'server_backup_abc.properties'). This file must exist within the specific server's backup subdirectory inside the manager's main BACKUP_DIR."
      required: true
      example: "world_backup_20250101_120000.mcworld"
      selector:
        text: {}

restore_latest_all:
  name: Restore Latest Full Server Backup
  description: "Restores the world and standard configuration files from the most recent 'all' type backup for the target server(s). WARNING: This overwrites current files! Use with caution."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager

install_server:
  name: Install New Minecraft Server
  description: "Installs a new Minecraft Bedrock server instance via the targeted BSM manager. Set 'overwrite: true' explicitly if you intend to replace an existing server with the same name."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    server_name:
      name: New Server Name
      description: Desired unique name for the new server (must be a valid directory name).
      required: true
      example: "my_new_survival"
      selector:
        text: {}
    server_version:
      name: Server Version
      description: "Version to install (e.g., 'LATEST', 'PREVIEW', or a specific version string like '1.20.81.01')."
      required: true
      example: "LATEST"
      selector:
        text: {}
    overwrite:
      name: Overwrite Existing
      description: "(Optional) If true, and a server with the same name exists, all its data will be deleted before installing the new one. Defaults to false."
      required: false
      example: false
      selector:
        boolean: {}

delete_server:
  name: Delete Minecraft Server
  description: "Permanently deletes ALL data for the target server instance(s), including its installation, configuration files, and all backups. THIS ACTION IS IRREVERSIBLE. USE WITH EXTREME CAUTION!"
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    confirm_deletion:
      name: Confirm Deletion
      description: "MUST be set to 'true' to confirm you understand this action is irreversible and will permanently delete all selected server data."
      required: true
      selector:
        boolean: {}

add_to_allowlist:
  name: Add Players to Server Allowlist
  description: Adds one or more players to the target server's allowlist. This does not remove players already on the list.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    players:
      name: Players
      description: A list of player Gamertags to add to the allowlist.
      required: true
      example: ["Player1", "AnotherGamer"]
      selector:
        object: {}
    ignores_player_limit:
      name: Ignores Player Limit
      description: "(Optional) Sets the 'ignoresPlayerLimit' flag for the players being added. Defaults to false."
      required: false
      example: false
      selector:
        boolean: {}

remove_from_allowlist:
  name: Remove Player from Server Allowlist
  description: Removes a specific player from the target server's allowlist. Player name matching is case-insensitive on the BSM API side.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    player_name:
      name: Player Name
      description: The Gamertag of the player to remove from the allowlist.
      required: true
      example: "PlayerToRemove"
      selector:
        text: {}

set_permissions:
  name: Set Server Player Permissions
  description: "Sets permission levels ('visitor', 'member', 'operator') for one or more players using their XUIDs on the target server(s). This replaces existing permission levels for the specified players."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    permissions:
      name: Permissions Dictionary
      description: "A dictionary mapping Player XUIDs (as strings) to permission level strings (e.g., 'visitor', 'member', 'operator')."
      required: true
      example: '{"2535416409681153": "operator", "2535457894355891": "member"}'
      selector:
        object: {}

reset_world:
  name: Delete Minecraft World
  description: "Permanently deletes ALL world data for the target server instance(s). THIS ACTION IS IRREVERSIBLE. USE WITH EXTREME CAUTION!"
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    confirm_deletion:
      name: Confirm Deletion
      description: "MUST be set to 'true' to confirm you understand this action is irreversible and will permanently delete all selected server world data."
      required: true
      selector:
        boolean: {}

update_properties:
  name: Update Server Properties
  description: "Updates specified server properties (e.g., 'max-players', 'difficulty') for the target server(s). Only properties allowed by the BSM API can be changed."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    properties:
      name: Properties Dictionary
      description: "A dictionary mapping server property keys (strings) to their new desired values (strings, numbers, or booleans). Refer to BSM documentation for allowed keys and value types."
      required: true
      example: '{"max-players": 15, "difficulty": "normal", "allow-list": true}'
      selector:
        object: {}

install_world:
  name: Install World to Server
  description: "Installs a world from a .mcworld file into the target server, replacing its current world. WARNING: This is a destructive operation. The .mcworld file must already exist in the BSM manager's 'content/worlds' directory."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    filename:
      name: World Filename
      description: "The name of the .mcworld file (e.g., 'MyCoolWorld.mcworld') located in the BSM manager's 'content/worlds' directory. Can include subdirectories relative to 'content/worlds' (e.g., 'user_uploads/MyCoolWorld.mcworld')."
      required: true
      example: "MyCoolWorld.mcworld"
      selector:
        text: {}

install_addon:
  name: Install Addon to Server
  description: "Installs an addon (.mcaddon or .mcpack) file into the target server. The addon file must already exist in the BSM manager's 'content/addons' directory."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    filename:
      name: Addon Filename
      description: "The name of the .mcaddon or .mcpack file (e.g., 'MyAwesomeAddon.mcaddon') located in the BSM manager's 'content/addons' directory. Can include subdirectories relative to 'content/addons'."
      required: true
      example: "CoolBehaviorPack.mcpack"
      selector:
        text: {}

configure_os_service:
  name: Configure Server OS Service
  description: "Configures OS-specific service settings for the target server(s), such as autoupdate or autostart (Linux systemd only for autostart)."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    autoupdate:
      name: Enable Autoupdate
      description: "Enable or disable the autoupdate feature for the server. This typically applies to Linux systemd service 'ExecStartPre' or a similar flag in Windows server configuration."
      required: true
      example: true
      selector:
        boolean: {}
    autostart:
      name: Enable Autostart (Linux Only)
      description: "(Optional, Linux Only) Enable or disable the server to autostart with the system via systemd user service. If not provided on Linux, the existing autostart setting may not be changed or could default to disabled depending on BSM API behavior."
      required: false
      example: true
      selector:
        boolean: {}

add_global_players:
  name: Add/Update Global Players
  description: "Adds or updates players in the BSM manager's global player list (players.json). This is a global manager action; target a BSM manager instance."
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager
  fields:
    players:
      name: Players Data
      description: 'A list of player strings, each in "PlayerName:PlayerXUID" format. Example: ["Steve:123...", "Alex:456..."]. Input as a YAML/JSON list.'
      required: true
      example: '["NewPlayer:1234567890123456", "AnotherOne:9876543210987654"]'
      selector:
        object: {}

scan_players:
  name: Scan Player Logs
  description: Triggers a scan of all server log files on the BSM manager host to update the global list of known players. Targets a BSM manager instance.
  target:
    entity:
      domain: sensor
      integration: bedrock_server_manager
    device:
      integration: bedrock_server_manager