{
  "title": "Bedrock Server Manager",
  "config": {
    "step": {
      "user": {
        "title": "Connect to Bedrock Server Manager",
        "description": "Enter the API connection details for your Bedrock Server Manager instance.",
        "data": {
          "host": "Host / IP Address",
          "port": "Port",
          "username": "API Username",
          "password": "API Password"
        }
      },
      "select_servers": {
        "title": "Select Initial Servers",
        "description": "{message}",
        "data": {
          "servers": "Servers to Monitor"
        }
      }
    },
    "error": {
      "cannot_connect": "Failed to connect to the Manager API at the specified host/port. Check the address and ensure the Manager is running.",
      "invalid_auth": "Invalid username or password provided. Please check your credentials.",
      "no_servers_found": "Successfully connected and authenticated, but the Manager reported no Minecraft server instances were found. You can still add the manager.",
      "server_validation_failed": "Failed to validate the selected server '{server_name}' with the Manager API. It might not exist or there was an API error. (This error should not occur in the new flow)",
      "unknown_error": "An unexpected error occurred. Check Home Assistant logs for more details.",
      "unknown_validation_error": "An unexpected error occurred during validation.",
      "api_error": "An API error occurred while communicating with the manager: {error_details}"
    },
    "abort": {
      "already_configured": "A Manager instance for {host}:{port} is already configured.",
      "reauth_successful": "Re-authentication was successful."
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "Bedrock Server Manager Options",
        "description": "Choose which settings to modify for the manager at {host}.",
        "menu": {
          "options": {
            "update_credentials": "Update API Credentials",
            "select_servers": "Select Servers to Monitor",
            "update_interval": "Update Polling Interval"
          }
        }
      },
      "update_credentials": {
        "title": "Update API Credentials",
        "description": "Enter the new API username and password for the manager at {host}.",
        "data": {
          "username": "New API Username",
          "password": "New API Password"
        }
      },
      "select_servers": {
        "title": "Select Servers to Monitor",
        "description": "Choose which Minecraft server instances managed by this API should be monitored by Home Assistant.",
        "data": {
          "servers": "Servers to Monitor"
        }
      },
      "update_interval": {
        "title": "Update Polling Interval",
        "description": "Set how often Home Assistant should poll the manager API for status updates (for running servers). Lower values update faster but increase load.",
        "data": {
          "scan_interval": "Update frequency (seconds)"
        }
      }
    },
    "error": {
      "invalid_scan_interval": "Update frequency must be at least 5 seconds.",
      "invalid_auth": "Authentication failed with the provided credentials. Please check username and password.",
      "cannot_connect": "Failed to connect to the Manager API to validate credentials or fetch server list.",
      "fetch_servers_failed": "Failed to fetch the list of servers from the manager. Check connection and logs.",
      "unknown_error": "An unexpected error occurred."
    },
    "abort": {
      "credentials_updated": "Credentials updated successfully. Reloading integration.",
      "changes_successful": "Options updated successfully. Reloading integration."
    }
  },
  "entity": {
    "button": {
      "restart_server": { "name": "Restart" },
      "update_server": { "name": "Update" },
      "trigger_backup": { "name": "Backup" },
      "export_world": { "name": "Export World" },
      "prune_backups": { "name": "Prune Backups" },
      "prune_downloads": { "name": "Prune Download Cache" },
      "scan_players": { "name": "Scan Player Logs" }
    },
    "switch": {
      "server_control": { "name": "Server" }
    },
    "sensor": {
      "status": { "name": "Status" },
      "cpu_usage": { "name": "CPU Usage" },
      "memory_usage": { "name": "Memory Usage" }
    }
  },
  "services": {
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the specified Minecraft server's console. Target entities or devices associated with the server instance you want to command.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "The command string to send to the server console (without the leading '/')."
        }
      }
    },
    "prune_download_cache": {
      "name": "Prune download cache",
      "description": "Deletes older downloaded server archives from a specified directory on the manager host.",
      "fields": {
        "directory": {
          "name": "Directory Path",
          "description": "The absolute path on the manager host where download files are stored."
        },
        "keep": {
          "name": "Keep Count",
          "description": "(Optional) Number of newest files to keep. Uses manager's default if omitted."
        }
      }
    },
    "trigger_backup": {
      "name": "Trigger specific backup",
      "description": "Triggers a specific backup operation (world, config file, or all) for the target server(s).",
      "fields": {
        "backup_type": {
          "name": "Backup Type",
          "description": "Type of backup to perform ('all', 'world', or 'config')."
        },
        "file_to_backup": {
          "name": "File to Backup",
          "description": "(Optional) Required only if backup_type is 'config'. Relative path of the config file (e.g., 'server.properties')."
        }
      }
    },
    "restore_backup": {
      "name": "Restore specific backup",
      "description": "Restores a specific world or config file from a backup for the target server(s). Overwrites current files!",
      "fields": {
        "restore_type": {
          "name": "Restore Type",
          "description": "Type of restore to perform ('world' or 'config')."
        },
        "backup_file": {
          "name": "Backup File Path",
          "description": "The full path to the backup file on the manager host."
        }
      }
    },
    "restore_latest_all": {
      "name": "Restore latest full backup",
      "description": "Restores the world and standard configuration files from the most recent 'all' type backup for the target server(s). Overwrites current files!"
    },
    "install_server": {
      "name": "Install new server",
      "description": "Installs a new Minecraft Bedrock server instance via the manager.",
      "fields": {
        "server_name": {
          "name": "Server Name",
          "description": "Desired unique name for the new server."
        },
        "server_version": {
          "name": "Server Version",
          "description": "Version to install ('LATEST', 'PREVIEW', or specific version)."
        },
        "overwrite": {
          "name": "Overwrite Existing",
          "description": "(Optional) If true, deletes existing server data with the same name first."
        }
      }
    },
    "delete_server": {
      "name": "Delete server",
      "description": "Permanently deletes ALL data for the target server instance(s). IRREVERSIBLE!",
      "fields": {
        "confirm_deletion": {
          "name": "Confirm Deletion",
          "description": "MUST be true to confirm irreversible deletion."
        }
      }
    },
    "add_to_allowlist": {
      "name": "Add to allowlist",
      "description": "Adds one or more players to the target server's allowlist.",
      "fields": {
        "players": {
          "name": "Players",
          "description": "List of player Gamertags to add."
        },
        "ignores_player_limit": {
          "name": "Ignores Player Limit",
          "description": "(Optional) Set the 'ignoresPlayerLimit' flag for these players."
        }
      }
    },
    "remove_from_allowlist": {
      "name": "Remove from allowlist",
      "description": "Removes a specific player from the target server's allowlist (case-insensitive).",
      "fields": {
        "player_name": {
          "name": "Player Name",
          "description": "The Gamertag of the player to remove."
        }
      }
    },
    "set_permissions": {
      "name": "Set player permissions",
      "description": "Sets permission levels ('visitor', 'member', 'operator') for players using their XUIDs on the target server(s).",
      "fields": {
        "permissions": {
          "name": "Permissions Map",
          "description": "Dictionary mapping Player XUIDs (strings) to permission levels (strings: 'visitor', 'member', 'operator'). Input as YAML or JSON."
        }
      }
    },
    "update_properties": {
      "name": "Update server properties",
      "description": "Updates specified server properties (e.g., max-players, difficulty) for the target server(s). Only allowed properties can be changed.",
      "fields": {
        "properties": {
          "name": "Properties Map",
          "description": "Dictionary mapping allowed server property keys (strings) to their new values (strings, numbers, booleans). Input as YAML or JSON."
        }
      }
    },
    "install_world": {
      "name": "Install world from file",
      "description": "Installs a .mcworld file into the target server, REPLACING the current world. File must exist in manager's content/worlds directory.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "The .mcworld filename (e.g., 'MyBackup.mcworld') relative to the manager's 'content/worlds' directory."
        }
      }
    },
    "install_addon": {
      "name": "Install addon from file",
      "description": "Installs an .mcaddon or .mcpack file into the target server. File must exist in the manager's 'content/addons' directory.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "The .mcaddon or .mcpack filename (e.g., 'MyAwesomeAddon.mcaddon') relative to the manager's 'content/addons' directory."
        }
      }
    },
    "configure_os_service": {
      "name": "Configure OS service settings",
      "description": "Configures OS-specific service settings for the target server(s), like autoupdate or autostart (Linux only).",
      "fields": {
        "autoupdate": {
          "name": "Enable Autoupdate",
          "description": "Set to true to enable the autoupdate feature for the server."
        },
        "autostart": {
          "name": "Enable Autostart (Linux Only)",
          "description": "(Optional) Set to true to enable the server to start automatically on system boot (via systemd user service on Linux)."
        }
      }
    }
  }
}